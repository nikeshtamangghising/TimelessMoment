// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  name             String
  password         String?
  role             Role       @default(CUSTOMER)
  emailVerified    DateTime?
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  orders           Order[]
  accounts         Account[]
  sessions         Session[]
  reviews          Review[]
  blogPosts        BlogPost[]
  activities       UserActivity[]
  interests        UserInterest[]
  cart             Cart[]
  favorites        Favorite[]
  addresses        Address[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enhanced Product model with SEO and competitive features
model Product {
  id                   String               @id @default(cuid())
  name                 String
  slug                 String               @unique // SEO-friendly URLs
  description          String               @db.Text
  shortDescription     String?              // For cards and listings
  price                Float
  purchasePrice        Float?               // The cost of acquiring the product
  discountPrice        Float?               // For sale pricing
  currency             String               @default("NPR")
  images               String[]
  inventory            Int
  lowStockThreshold    Int                  @default(5)
  sku                  String?              @unique // Product SKU
  weight               Float?               // For shipping calculations
  dimensions           Json?                // {length, width, height}
  
  // SEO & Marketing
  metaTitle            String?
  metaDescription      String?
  tags                 String[]             @default([])
  
  // Product Performance Metrics
  viewCount            Int                  @default(0)
  orderCount           Int                  @default(0)
  favoriteCount        Int                  @default(0)
  cartCount            Int                  @default(0)
  popularityScore      Float                @default(0)
  lastScoreUpdate      DateTime?            @default(now())
  purchaseCount        Int                  @default(0)
  ratingAvg            Float?               @default(0)
  ratingCount          Int                  @default(0)
  
  // Categorization
  categoryId           String
  brandId              String?
  
  // Status & Timestamps
  isActive             Boolean              @default(true)
  isFeatured           Boolean              @default(false)
  isNewArrival         Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  // Relations
  category             Category             @relation(fields: [categoryId], references: [id])
  brand                Brand?               @relation(fields: [brandId], references: [id])
  orderItems           OrderItem[]
  inventoryAdjustments InventoryAdjustment[]
  reviews              Review[]
  attributes           ProductAttribute[]
  relatedProducts      ProductRelation[]    @relation("ProductToRelated")
  relatedToProducts    ProductRelation[]    @relation("RelatedToProduct")
  activities           UserActivity[]
  cartItems            Cart[]
  favorites            Favorite[]

  @@map("products")
  @@index([categoryId])
  @@index([brandId])
  @@index([slug])
  @@index([isActive, isFeatured])
  @@index([createdAt])
}

model Order {
  id                    String         @id @default(cuid())
  userId                String?        // Optional for guest orders
  guestEmail            String?        // Guest email for order tracking
  guestName             String?        // Guest name for order tracking
  status                OrderStatus    @default(PENDING)
  trackingNumber        String?        @unique
  total                 Float
  stripePaymentIntentId String?
  shippingAddress       Json?          // Shipping address information collected during checkout
  isGuestOrder          Boolean        @default(false) // Flag to identify guest orders
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User?          @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  trackingLogs          OrderTracking[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model EmailLog {
  id        String      @id @default(cuid())
  to        String
  subject   String
  template  String?
  status    EmailStatus @default(PENDING)
  messageId String?
  error     String?
  sentAt    DateTime?
  createdAt DateTime    @default(now())

  @@map("email_logs")
}



enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

model InventoryAdjustment {
  id         String               @id @default(cuid())
  productId  String
  quantity   Int
  type       InventoryChangeType
  reason     String
  createdBy  String?
  createdAt  DateTime            @default(now())
  product    Product             @relation(fields: [productId], references: [id])

  @@map("inventory_adjustments")
}

enum InventoryChangeType {
  MANUAL_ADJUSTMENT
  RESTOCK
  DAMAGED
  ORDER_PLACED
  ORDER_RETURNED
  INITIAL
  OTHER
}

// Site Settings Model for configurable shipping, tax, etc.
model SiteSettings {
  id                    String   @id @default(cuid())
  key                   String   @unique
  value                 String
  type                  SettingType @default(STRING)
  description           String?
  category              String   @default("general")
  isPublic              Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("site_settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// Hierarchical Categories for SEO and navigation
model Category {
  id               String     @id @default(cuid())
  name             String
  slug             String     @unique
  description      String?
  parentId         String?
  metaTitle        String?
  metaDescription  String?
  image            String?
  isActive         Boolean    @default(true)
  sortOrder        Int        @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relations
  parent           Category?     @relation("CategoryToParent", fields: [parentId], references: [id])
  children         Category[]    @relation("CategoryToParent")
  products         Product[]
  userInterests    UserInterest[]
  
  @@map("categories")
  @@index([parentId])
  @@index([slug])
  @@index([isActive, sortOrder])
}

// Brand management for filtering and SEO
model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@map("brands")
  @@index([slug])
}

// Customer Reviews for SEO and social proof
model Review {
  id          String   @id @default(cuid())
  productId   String
  userId      String?
  guestName   String?
  guestEmail  String?
  rating      Int      // 1-5 stars
  title       String?
  content     String?
  isVerified  Boolean  @default(false) // Verified purchase
  isApproved  Boolean  @default(false) // Admin moderation
  helpfulVotes Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])
  
  @@map("reviews")
  @@index([productId, isApproved])
  @@index([userId])
  @@index([rating])
}

// Product Attributes for advanced filtering
model ProductAttribute {
  id        String  @id @default(cuid())
  productId String
  name      String  // e.g., "Color", "Size", "Material"
  value     String  // e.g., "Red", "XL", "Cotton"
  
  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_attributes")
  @@index([productId])
  @@index([name, value])
}

// Related Products for cross-selling
model ProductRelation {
  id              String @id @default(cuid())
  productId       String
  relatedProductId String
  relationType    String // "related", "upsell", "cross_sell", "bundle"
  
  // Relations
  product         Product @relation("ProductToRelated", fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct  Product @relation("RelatedToProduct", fields: [relatedProductId], references: [id], onDelete: Cascade)
  
  @@map("product_relations")
  @@unique([productId, relatedProductId, relationType])
}

// Blog/Content Management for SEO
model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  excerpt         String?
  content         String   @db.Text
  featuredImage   String?
  metaTitle       String?
  metaDescription String?
  tags            String[] @default([])
  isPublished     Boolean  @default(false)
  publishedAt     DateTime?
  authorId        String
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  author          User     @relation(fields: [authorId], references: [id])
  
  @@map("blog_posts")
  @@index([slug])
  @@index([isPublished, publishedAt])
  @@index([authorId])
}

// Coupons and Discounts
model Coupon {
  id            String      @id @default(cuid())
  code          String      @unique
  description   String?
  discountType  DiscountType // PERCENTAGE, FIXED_AMOUNT
  discountValue Float
  minOrderValue Float?      // Minimum order for coupon to apply
  maxDiscount   Float?      // Max discount for percentage coupons
  usageLimit    Int?        // How many times can be used
  usedCount     Int         @default(0)
  isActive      Boolean     @default(true)
  startsAt      DateTime?
  expiresAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("coupons")
  @@index([code])
  @@index([isActive, expiresAt])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// User Activity Tracking for Recommendation Engine
model UserActivity {
  id           String   @id @default(cuid())
  userId       String?
  sessionId    String?  // For guest users
  productId    String
  activityType ActivityType
  createdAt    DateTime @default(now())
  
  // Relations
  user         User?    @relation(fields: [userId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
  
  @@map("user_activities")
  @@index([userId, activityType])
  @@index([sessionId, activityType])
  @@index([productId, createdAt])
}

enum ActivityType {
  VIEW
  CART_ADD
  FAVORITE
  ORDER
}

// User Interest Profile for Personalized Recommendations
model UserInterest {
  id               String   @id @default(cuid())
  userId           String
  categoryId       String
  interestScore    Float    @default(0)
  interactionCount Int      @default(0)
  lastInteraction  DateTime @default(now())
  
  // Relations
  user             User     @relation(fields: [userId], references: [id])
  category         Category @relation(fields: [categoryId], references: [id])
  
  @@unique([userId, categoryId])
  @@map("user_interests")
  @@index([userId])
  @@index([categoryId])
}

// Shopping Cart
model Cart {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  productId String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User?    @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@map("cart")
  @@index([userId])
  @@index([sessionId])
}

// User Favorites
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
  @@map("favorites")
  @@index([userId])
  @@index([productId])
}

// Order Tracking System
model OrderTracking {
  id        String   @id @default(cuid())
  orderId   String
  status    OrderStatus
  message   String?
  createdAt DateTime @default(now())
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  
  @@map("order_tracking")
  @@index([orderId, createdAt])
}
model Address {
  id          String   @id @default(cuid())
  userId      String
  type        AddressType @default(SHIPPING)
  isDefault   Boolean  @default(false)
  fullName    String
  email       String
  phone       String?
  address     String
  city        String
  postalCode  String
  country     String   @default("Nepal")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
  @@index([userId])
  @@index([isDefault])
}

enum AddressType {
  SHIPPING
  BILLING
}
