// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  password         String?
  role             Role      @default(CUSTOMER)
  emailVerified    DateTime?
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orders           Order[]
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id                   String               @id @default(cuid())
  name                 String
  description          String
  price                Float
  images               String[]
  inventory            Int
  lowStockThreshold    Int                  @default(5)
  category             String
  slug                 String               @unique
  isActive             Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  orderItems           OrderItem[]
  inventoryAdjustments InventoryAdjustment[]

  @@map("products")
}

model Order {
  id                    String      @id @default(cuid())
  userId                String
  status                OrderStatus @default(PENDING)
  total                 Float
  stripePaymentIntentId String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  user                  User        @relation(fields: [userId], references: [id])
  items                 OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model EmailLog {
  id        String      @id @default(cuid())
  to        String
  subject   String
  template  String?
  status    EmailStatus @default(PENDING)
  messageId String?
  error     String?
  sentAt    DateTime?
  createdAt DateTime    @default(now())

  @@map("email_logs")
}



enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

model InventoryAdjustment {
  id         String               @id @default(cuid())
  productId  String
  quantity   Int
  type       InventoryChangeType
  reason     String
  createdBy  String?
  createdAt  DateTime            @default(now())
  product    Product             @relation(fields: [productId], references: [id])

  @@map("inventory_adjustments")
}

enum InventoryChangeType {
  MANUAL_ADJUSTMENT
  RESTOCK
  DAMAGED
  ORDER_PLACED
  ORDER_RETURNED
  INITIAL
  OTHER
}
